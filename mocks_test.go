// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package nibirudb

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// DB provides a mock function for the type MockDatabase
func (_mock *MockDatabase) DB(ctx context.Context) *gorm.DB {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// MockDatabase_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type MockDatabase_DB_Call struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) DB(ctx interface{}) *MockDatabase_DB_Call {
	return &MockDatabase_DB_Call{Call: _e.mock.On("DB", ctx)}
}

func (_c *MockDatabase_DB_Call) Run(run func(ctx context.Context)) *MockDatabase_DB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_DB_Call) Return(dB *gorm.DB) *MockDatabase_DB_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *MockDatabase_DB_Call) RunAndReturn(run func(ctx context.Context) *gorm.DB) *MockDatabase_DB_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Transaction() Transaction {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 Transaction
	if returnFunc, ok := ret.Get(0).(func() Transaction); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Transaction)
		}
	}
	return r0
}

// MockDatabase_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockDatabase_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Transaction() *MockDatabase_Transaction_Call {
	return &MockDatabase_Transaction_Call{Call: _e.mock.On("Transaction")}
}

func (_c *MockDatabase_Transaction_Call) Run(run func()) *MockDatabase_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Transaction_Call) Return(transaction Transaction) *MockDatabase_Transaction_Call {
	_c.Call.Return(transaction)
	return _c
}

func (_c *MockDatabase_Transaction_Call) RunAndReturn(run func() Transaction) *MockDatabase_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransaction creates a new instance of MockTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransaction {
	mock := &MockTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

type MockTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransaction) EXPECT() *MockTransaction_Expecter {
	return &MockTransaction_Expecter{mock: &_m.Mock}
}

// ExecTransaction provides a mock function for the type MockTransaction
func (_mock *MockTransaction) ExecTransaction(ctx context.Context, fn TransactionFunction) (context.Context, error) {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecTransaction")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, TransactionFunction) (context.Context, error)); ok {
		return returnFunc(ctx, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, TransactionFunction) context.Context); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, TransactionFunction) error); ok {
		r1 = returnFunc(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransaction_ExecTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecTransaction'
type MockTransaction_ExecTransaction_Call struct {
	*mock.Call
}

// ExecTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn TransactionFunction
func (_e *MockTransaction_Expecter) ExecTransaction(ctx interface{}, fn interface{}) *MockTransaction_ExecTransaction_Call {
	return &MockTransaction_ExecTransaction_Call{Call: _e.mock.On("ExecTransaction", ctx, fn)}
}

func (_c *MockTransaction_ExecTransaction_Call) Run(run func(ctx context.Context, fn TransactionFunction)) *MockTransaction_ExecTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 TransactionFunction
		if args[1] != nil {
			arg1 = args[1].(TransactionFunction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransaction_ExecTransaction_Call) Return(context1 context.Context, err error) *MockTransaction_ExecTransaction_Call {
	_c.Call.Return(context1, err)
	return _c
}

func (_c *MockTransaction_ExecTransaction_Call) RunAndReturn(run func(ctx context.Context, fn TransactionFunction) (context.Context, error)) *MockTransaction_ExecTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockTransaction
func (_mock *MockTransaction) GetContext(ctx context.Context) *TransactionContext {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 *TransactionContext
	if returnFunc, ok := ret.Get(0).(func(context.Context) *TransactionContext); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TransactionContext)
		}
	}
	return r0
}

// MockTransaction_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockTransaction_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransaction_Expecter) GetContext(ctx interface{}) *MockTransaction_GetContext_Call {
	return &MockTransaction_GetContext_Call{Call: _e.mock.On("GetContext", ctx)}
}

func (_c *MockTransaction_GetContext_Call) Run(run func(ctx context.Context)) *MockTransaction_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransaction_GetContext_Call) Return(transactionContext *TransactionContext) *MockTransaction_GetContext_Call {
	_c.Call.Return(transactionContext)
	return _c
}

func (_c *MockTransaction_GetContext_Call) RunAndReturn(run func(ctx context.Context) *TransactionContext) *MockTransaction_GetContext_Call {
	_c.Call.Return(run)
	return _c
}
